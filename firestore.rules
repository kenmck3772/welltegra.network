rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate message data
    function isValidMessage() {
      return request.resource.data.keys().hasAll(['text', 'role', 'timestamp'])
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 10000  // Max 10KB per message
        && request.resource.data.role in ['user', 'model']
        && request.resource.data.timestamp == request.time;
    }

    // Helper function to check message rate limiting
    function isWithinRateLimit() {
      // Allow max 100 messages per user per hour
      // This requires checking the count, but for simplicity we'll rely on client-side throttling
      return true;
    }

    // AI Assistant Messages
    // Path: /artifacts/{appId}/users/{userId}/messages/{messageId}
    match /artifacts/{appId}/users/{userId}/messages/{messageId} {

      // Users can only read their own messages
      allow read: if isOwner(userId);

      // Users can only create their own messages with valid data
      allow create: if isOwner(userId)
                    && isValidMessage()
                    && isWithinRateLimit();

      // Prevent updates and deletes to maintain chat history integrity
      allow update: if false;
      allow delete: if false;
    }

    // User metadata (optional, for future features like preferences)
    match /artifacts/{appId}/users/{userId}/metadata/{document=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
